" @Author: Wasif Malik (wmalik@gmail.com)
" @Reference: Some stuff taken from these awesome blog posts:
"             http://stevelosh.com/blog/2010/09/coming-home-to-vim
"             http://learnvimscriptthehardway.stevelosh.com/

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'fatih/vim-go'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'vim-scripts/The-NERD-Commenter'
Plug 'flazz/vim-colorschemes'
Plug 'mileszs/ack.vim'
Plug 'hashivim/vim-terraform'
Plug 'instant-markdown/vim-instant-markdown', {'for': 'markdown', 'do': 'yarn install'}
let g:instant_markdown_autostart = 0
let g:instant_markdown_mermaid = 1
autocmd FileType markdown nmap <leader>p :InstantMarkdownPreview
Plug 'tpope/vim-surround'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'ryanoasis/vim-devicons'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Plug 'lambdalisue/fern.vim' tree viewer
Plug 'yegappan/mru'
Plug 'takac/vim-hardtime'
Plug 'eslint/eslint'
Plug 'prabirshrestha/vim-lsp'
" Plug 'mattn/vim-lsp-settings'
" Plug '~/lottie/labs/vim-lsp-settings'
let g:hardtime_default_on = 0
let g:hardtime_showmsg = 1
let g:hardtime_ignore_quickfix = 1
let g:hardtime_allow_different_key = 1
let g:hardtime_maxcount = 2
" Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarnpkg install --frozen-lockfile'}
call plug#end()


" FOR DEBUGGING vim-lsp
" let g:lsp_log_verbose = 1
" let g:lsp_log_file = expand('~/lottie/labs/vim-lsp-logs/debug.log')

" let g:coc_global_extensions = [
      " \'coc-tsserver',]

set nocompatible	" Use Vim defaults instead of 100% vi compatibility
set nofoldenable

colorscheme jellybeans

syntax on
filetype on
filetype plugin on
filetype indent on
set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
"set hidden " dont really like the fact that the buffers stay open
set wildmenu
set nu
set wildmode=list:longest
set novisualbell
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set wrap
set sidescroll=1
set textwidth=80
set formatoptions=qrn1
set listchars=tab:▸\ ,eol:¬
set smartcase
set showmatch
set noantialias
" set number relativenumber

" For smart indenting
"set smartindent "'smartindent' and 'cindent' might interfere with file type
""based indentation, and should never be used in conjunction with it.
set tabstop=4
set shiftwidth=2
set expandtab "pressing tab inserts spaces
if has("gui_running")
    set mouse=a
    set guioptions=egmrt
    set guioptions-=m
    set guifont=Inconsolata\ 12
    "
    " Set cursor color in different modes
    highlight Cursor guifg=black guibg=lightgreen
    highlight iCursor guibg=red ctermbg=red
    set guicursor=n-v-c:block-Cursor
    set guicursor+=i:ver25-iCursor
    set guicursor+=n-v-c:blinkon0
    hi StatusLine guibg=white guifg=royalblue
endif

set directory=/tmp "this is to store all sw* files in /tmp
set noincsearch
set hlsearch

set ignorecase
runtime! ftplugin/man.vim
" searches for a tags file in the higher level directories until it is found
" enables tag browsing no matter where the src is
set tags=./tags;/
" highlight extra whitespace
highlight ExtraWhitespace ctermbg=blue guibg=blue
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
set wildignore=*.o,*~,*.beam,*.swf,*.mp3,*.jpg,*.png,ebin,.git

"}}}

" Shortcuts {{{

" shortcut to run a shell command and paste the output in a scratch buffer
command! -nargs=* -complete=shellcmd R new | setlocal buftype=nofile bufhidden=hide noswapfile  | r !<args>

" grep the word under cursor (case insensitive) in multiple directories
" nmap <leader>f :R grep -sirn <c-r>=expand("<cword> *")<cr> .<cr> :set ft=sh<cr>
nmap <leader>f :Ag <c-r>=expand("<cword> *")<cr> .<cr>

" Open a scratch buffer
command! S new | setlocal buftype=nofile bufhidden=hide noswapfile
command! ST tabnew | setlocal buftype=nofile bufhidden=hide noswapfile

" Get the current unix timestamp
command! Timestamp r! date \+\%s
" Get nicely formatted time stamp
nnoremap <leader>d :r! date \+\%Y-\%m-\%d\ \%H:\%M:\%S<cr>
nnoremap <leader>t :r! date -d\@<C-r><C-w><cr>
nnoremap <leader>T :r! date \+\%s<cr>

nnoremap <C-p> :Files<CR>

let mapleader = ","
inoremap jk <Esc>
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <C-j> <C-w>w
nnoremap <C-k> <C-w>W
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <C-l> :tabnext<CR>
nnoremap <C-h> :tabprev<CR>
noremap <silent> <Space> :noh<Bar>:echo<CR>
nnoremap <leader>k :set list!<CR>
nnoremap :W :w
nnoremap :Set :set
nnoremap T :Texplore<CR>
inoremap <C-a> <C-o>^
inoremap <C-e> <C-o>$

set mouse=a

" Convert the current word to uppercase insert mode
inoremap <C-u> <Esc>viwUea

iabbrev adn and

nnoremap <leader>ve :tabnew $MYVIMRC<cr>
nnoremap <leader>vs :source ~/.vimrc<cr>

" surround a word or a visual block with "" (doesnt work with v-line)
vnoremap <leader>" <esc>`<i"<esc>`>la"
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
inoremap <C-q> <Esc>viw<esc>a"<esc>hbi"<esc>lela
" surround a word or a visual block with {} (doesnt work with v-line)
vnoremap <leader>{ <esc>`<i}<esc>`>la{
nnoremap <leader>{ viw<esc>a}<esc>hbi{<esc>lel
inoremap <C-q> <Esc>viw<esc>a}<esc>hbi{<esc>lela
" surround a word or a visual block with {} (doesnt work with v-line)
vnoremap <leader>( <esc>`<i)<esc>`>la(
nnoremap <leader>( viw<esc>a)<esc>hbi(<esc>lel
inoremap <C-q> <Esc>viw<esc>a)<esc>hbi(<esc>lela
" surround a word or a visual block with {} (doesnt work with v-line)
vnoremap <leader>[ <esc>`<i]<esc>`>la[
nnoremap <leader>[ viw<esc>a]<esc>hbi[<esc>lel
inoremap <C-q> <Esc>viw<esc>a]<esc>hbi[<esc>lela

" surround a word or a visual block with '' (doesnt work with v-line)
vnoremap <leader>" <esc>`<i'<esc>`>la'
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel
noh
" Insert a character at the end of line
nnoremap <leader>, :normal! mqA,<esc>`q
nnoremap <leader>. :normal! mqA.<esc>`q
nnoremap <leader>; :normal! mqA;<esc>`q

" generate exuberant ctags for all directories excluding the assets directory
nnoremap <leader>ct :!ctags -R --exclude=assets *<cr>

augroup filetype_html
    autocmd!
    autocmd FileType,BufNewFile,BufRead *.mustache setlocal filetype=html
    au FileType *.mustache setl sw=2 sts=2
    au FileType html setl sw=2 sts=2
augroup END

inoremap <C-h> <left>
inoremap <C-l> <right>
inoremap <C-j> <down>
inoremap <C-k> <up>
xnoremap . :norm.<CR>

" Move visual block (only for eye-candy)
" vnoremap J :m '>+1<CR>gvgv
" vnoremap K :m '<-2<CR>gvgv

let g:ref_use_vimproc = 1
let g:ref_open = 'split'
let g:ref_cache_dir = expand($TMP . '/vim_ref_cache/')
nno <leader>K :<C-u>Unite ref/erlang
            \ -vertical -default-action=split<CR>


nnoremap <leader>a :Ack! <C-r><C-w><cr>

set autowrite
set autowriteall

nmap <leader>p :set paste<cr>"*p:set nopaste<cr>
nmap <leader>np :set nopaste<cr>
nmap <leader>m :MRUToggle<cr>

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" local cd into the windows file
"autocmd BufEnter * silent! lcd %:p:h

set clipboard=unnamedplus

let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]

set exrc

let NERDSpaceDelims=1
let NERDDefaultAlign='left'

noremap <silent> <Leader>vS :<C-u>let @z=&so<CR>:set so=0 noscb<CR>:bo vs<CR>Ljzt:setl scb<CR><C-w>p:setl scb<CR>:let &so=@z<CR>

" modify selected text using combining diacritics
command! -range -nargs=0 Overline        call s:CombineSelection(<line1>, <line2>, '0305')
command! -range -nargs=0 Underline       call s:CombineSelection(<line1>, <line2>, '0332')
command! -range -nargs=0 DoubleUnderline call s:CombineSelection(<line1>, <line2>, '0333')
command! -range -nargs=0 Strikethrough   call s:CombineSelection(<line1>, <line2>, '0336')

function! s:CombineSelection(line1, line2, cp)
  execute 'let char = "\u'.a:cp.'"'
  execute a:line1.','.a:line2.'s/\%V[^[:cntrl:]]/&'.char.'/ge'
endfunction

"let g:syntastic_go_checkers = []
"let g:syntastic_go_gometalinter_args = ['--disable-all']
"let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

"let g:go_metalinter_autosave = 1
"let g:go_metalinter_autosave_enabled = []
autocmd FileType go nmap <leader>b :GoBuild<cr>
autocmd FileType go nmap <leader>t :GoTestCompile<cr>
autocmd FileType go nmap <leader>i :GoInfo<cr>
autocmd FileType go nmap <leader>v :GoVet<cr>
autocmd FileType go nmap <leader>d :GoDescribe<cr>
autocmd FileType go nmap <leader>r :GoRename<cr>
autocmd FileType go nmap <leader>R :GoReferrers<cr>
autocmd FileType go nmap <leader>f :GoFillStruct<cr>
autocmd FileType go nmap <leader>l yiwolog.Println("DEBUG", "<Esc>pa", <Esc>pa)<Esc>
autocmd FileType go nmap <leader>e oif err != nil {<cr>  fmt.Println("DEBUG", err)<cr>  return nil, err<cr>}<Esc>:w<cr>

let g:go_play_browser_command = '/usr/bin/firefox'
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
" let g:go_highlight_format_strings = 1
" let g:go_fmt_options = {
      " \ 'goimports': '-local github.com',
      " \ }
" let g:go_metalinter_enabled = []
" let g:go_metalinter_command = 'golangci-lint'

" augroup filetype_go
    " autocmd!
    " au BufWritePre *.go :GoImports
" augroup END

" GoTo code navigation (from Theo)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gI <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)


" Ps = 0  -> blinking block.
" Ps = 1  -> blinking block (default).
" Ps = 2  -> steady block.
" Ps = 3  -> blinking underline.
" Ps = 4  -> steady underline.
" Ps = 5  -> blinking bar (xterm).
" Ps = 6  -> steady bar (xterm).
" let &t_SI = "\e[3 q"
" let &t_EI = "\e[2 q"

" Terraform Docs
nmap <leader>t :call TerraformDocs()<CR>
fun! TerraformDocs()
    if &ft =~ "terraform"
      let s:base_url = "https://registry.terraform.io/providers/hashicorp" 
      let s:tf_version = "latest"
      let s:type_mapping = {"data": "data-sources", "resource": "resources"}
      let s:split_line = split(getline("."), " ")
      let s:type = s:type_mapping[s:split_line[0]]
      let s:keyword = trim(s:split_line[1], '"')
      let s:parts = split(s:keyword, "_")
      let s:provider = s:parts[0]
      let s:name = join(s:parts[1:], "_")
      let s:url = join([s:base_url, s:provider, s:tf_version, "docs", s:type, s:name], "/")
      silent exec "!xdg-open '".s:url."'"
      silent exec "redra!"
    else
      return
    endif
endfun


if executable('terramate-ls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'terramate-ls',
        \ 'cmd': {server_info->['terramate-ls']},
        \ 'allowlist': ['hcl'],
        \ })
endif

let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_highlights_enabled = 0

" check this out on vim 9
" let g:lsp_diagnostics_virtual_text_enabled = 1
" let g:lsp_diagnostics_virtual_text_insert_mode_enabled = 1

